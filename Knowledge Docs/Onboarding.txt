# CARD GENERATOR TOOL - DEVELOPER HANDOFF

## What This Is

A React-based web app for designing and balancing physical card game decks. Think of it as your prototyping workbench - you upload CSV files of card data, the tool generates print-ready card layouts, and gives you analytics to balance power levels across different decks.

Built for a tactical card battler with hero decks (40 cards each) and equipment systems. The design is inspired by MTG/Hearthstone but optimized for physical playtesting.

## Core Features

### 1. Card Generation & Export
- **Upload CSVs** ‚Üí Parses card data (minions, spells, equipment, etc.)
- **Live card preview** ‚Üí Renders cards at 63mm √ó 88mm (poker size)
- **A4 print layouts** ‚Üí 9 cards per page with cut guides
- **Download as HTML** ‚Üí User downloads printable file, opens in browser, Ctrl+P ‚Üí Save as PDF

**Key Design Choice:** We tried direct PDF generation (jsPDF + html2canvas) but it broke in iframe environments. The HTML download method is bulletproof and actually more flexible.

### 2. Deck Management
- **Create decks** from CSV uploads (hero decks vs equipment decks)
- **Customize colors** per card type (minions, spells, equipment slots)
- **Persistent storage** via localStorage
- **View modes** - grid view for visual scanning, export view for printing

### 3. Text Tweaks
- **Keyword bolding** - Define game keywords (like "Rage", "Armor"), they auto-bold on all cards
- **Font size controls** - Standard/minimum sizes with auto-scaling for long effect text
- **Dynamic text sizing** - Effect text shrinks to fit card boxes but never below minimum threshold

**Implementation Note:** Uses React refs + useEffect to measure DOM elements and dynamically adjust font size. Works but could be optimized - currently recalculates on every render.

### 4. Balancing Overview (The Power Tool)

Side-by-side deck comparison with these analytics:

**Mana Curves:**
- Overall curve (all cards)
- Minion-only curve
- Spell-only curve

**Card Composition:**
- Spell count vs minion count
- Total minion strength (sum of Attack/Health stats)
- Total minion gold (bounty economy analysis)
- Unique cards (distinct card names)
- Keyword density (cards with keywords vs vanilla cards)

**Visual Design:**
- 50/50 split layout (Deck A green, Deck B blue)
- Scrollable decklists at top showing full card details
- Bar charts for mana distribution
- Color-coded metrics for quick scanning

**Critical Logic - CSV Deduplication:**
The CSVs have duplicate rows for print tracking (e.g., "Fireball" appears 3 times with "3 copies" each). The analytics deduplicate by card name first, then count copies. This is intentional - don't "fix" it.

## Tech Stack

- **React** (functional components, hooks)
- **Lucide Icons** (for UI elements)
- **PapaParse** (CSV parsing)
- **Tailwind** (utility-first styling, all inline)
- **localStorage** (persistence)

**No build system** - it's a single JSX file that runs in Claude's artifact viewer. If you're moving this to production, you'll want to break it into components and add proper state management.

## File Structure (Conceptual)

```
CardGenerator (main component)
‚îú‚îÄ‚îÄ State Management (useState for decks, selections, settings)
‚îú‚îÄ‚îÄ Helper Functions
‚îÇ   ‚îú‚îÄ‚îÄ parseCSV() - PapaParse wrapper
‚îÇ   ‚îú‚îÄ‚îÄ analyzeDeck() - Core analytics logic (DEDUPE HERE)
‚îÇ   ‚îú‚îÄ‚îÄ applyKeywordBolding() - Text processing
‚îÇ   ‚îî‚îÄ‚îÄ getDefaultCustomization() - Color schemes
‚îú‚îÄ‚îÄ Card Rendering
‚îÇ   ‚îú‚îÄ‚îÄ MTGCard() - Router component
‚îÇ   ‚îú‚îÄ‚îÄ EquipmentCard() - Equipment layout
‚îÇ   ‚îú‚îÄ‚îÄ ClassCard() - Hero deck card layout
‚îÇ   ‚îî‚îÄ‚îÄ AutoSizeEffectText() - Dynamic text sizing
‚îú‚îÄ‚îÄ Tabs
‚îÇ   ‚îú‚îÄ‚îÄ Home (deck creation)
‚îÇ   ‚îú‚îÄ‚îÄ My Decks (deck list view)
‚îÇ   ‚îú‚îÄ‚îÄ Deck View (card grid)
‚îÇ   ‚îú‚îÄ‚îÄ Export (A4 print layout)
‚îÇ   ‚îú‚îÄ‚îÄ Balancing (comparison tool) ‚Üê MOST COMPLEX
‚îÇ   ‚îî‚îÄ‚îÄ Text Tweaks (settings)
‚îî‚îÄ‚îÄ Modals (create, customize, delete confirm)
```

## Data Structure

**Deck Object:**
```javascript
{
  id: timestamp,
  name: "Barbarian Starter",
  type: "hero" | "equipment",
  cards: [...], // Array of card objects from CSV
  customization: {
    minion: { color: "#059669" },
    spell: { color: "#2563EB" },
    // etc
    font: "Arial, sans-serif"
  },
  createdAt: ISO date string
}
```

**Card Object (varies by type):**
```javascript
// Hero cards
{
  "Card Name": "Fireball",
  "Card Type": "Spell",
  "Copies": 3,
  "Mana Cost": 4,
  "Effect": "Deal 5 damage...",
  // Minions also have:
  "Attack": 3,
  "Health": 4,
  "Bounty": "2g"
}

// Equipment cards
{
  "Item Name": "Desolator",
  "Category": "Weapon",
  "Slot": "Weapon",
  "Tier": 3,
  "Cost": 7,
  "Effect": "...",
  "Relic Type": "Passive" | "Active" (for relics only)
}
```

## Known Quirks & Gotchas

1. **CSV Duplication** - Users track print copies by repeating rows. Always deduplicate by card name in analytics. Don't count raw CSV rows.

2. **Iframe Sandbox** - `window.print()` doesn't work in Claude's artifact viewer. That's why we download HTML instead of direct PDF. If you're hosting this elsewhere, direct print might work.

3. **Text Auto-Sizing** - Uses refs and DOM measurement. Can be janky if cards render/re-render rapidly. Consider debouncing or memoization.

4. **localStorage Limits** - No chunking or compression. If someone uploads 10 decks with huge CSVs, they might hit the 5-10MB localStorage cap. Add error handling or move to IndexedDB.

5. **No Undo** - Deck deletion is permanent. Users have asked for this.

## Future Expansion Ideas

**High Priority:**
- **Deck editing** - Modify card counts, add/remove cards without re-uploading CSV
- **Equipment deck analysis** - Compare item costs, tier distributions, balance Round 3/6/9 shops
- **Export decklists** - Text format for sharing, maybe even Tabletop Simulator import

**Medium Priority:**
- **Comparison highlights** - Auto-flag imbalances ("Deck A gives 10g more bounty")
- **Average mana cost** metrics
- **Turn-by-turn playability** curves (what % of deck is playable on turn 3, 4, 5...)
- **Duplicate deck** feature for variant testing

**Low Priority but Cool:**
- **Mulligan simulator** - Test opening hands
- **Card search/filter** in deck view
- **Mana curve overlays** - Show both decks on one chart
- **Gold efficiency** ratios (damage per gold, stats per mana)

## Design Philosophy

**Player-First:** This tool is for designers who are iterating fast. Features prioritize "get the info quickly" over "make it look perfect." The balancing tab is intentionally dense - you want to scan 20 metrics in 10 seconds, not click through 20 screens.

**Physical Playtesting Focus:** The card layouts are print-ready because this game will be physically playtested. Digital tools are great, but nothing beats shuffling real cards.

**No BS Analytics:** Every metric serves a balance question. "Total minion gold" exists because economy balance matters in this game. We didn't add "average syllables per card name" because who cares.

## Contact & Context

This was built collaboratively with Oscar (the game designer) over multiple sessions. He's got strong opinions about what matters for balance, so if you're adding features, check with him first. He knows his game.

The card game itself is a 1v1 tactical battler with Dota-inspired equipment and hero progression systems. Think Hearthstone meets Artifact meets physical MTG. Economy (gold from bounties) is a core pillar, hence all the gold tracking.

**Good luck, and feel free to refactor this beast. It works but it's definitely grown organically. Break it into components, add TypeScript, whatever makes your life easier. Just don't break the CSV deduplication logic or Oscar will hunt you down.** üòÑ